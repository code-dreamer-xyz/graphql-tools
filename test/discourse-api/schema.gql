// A discourse Post
type Post {
  id: Int
  created_at: String
  cooked: String
  updated_at: String
  reply_count: Int
  reads: Int
  score: Int
  version: Int
  can_edit: Boolean
  can_delete: Boolean
  can_recover: Boolean
  can_wiki: Boolean
  raw: String
  wiki: Boolean
  user_id: Int
  category_id: Int
  username: String
  topic: Topic
}

// A discourse Topic
type Topic {
  id: String
  title: String
  fancy_title: String
  posts_count: Int
  views: Int
  reply_count: Int
  participant_count: Int
  like_count: Int
  visible: Boolean
  closed: Boolean
  archived: Boolean
  has_summary: Boolean
  slug: String
  word_count: Int
  user_id: Int
  draft_key: String
  draft_sequence: String
  category: Category
  posts: PaginatedPostList
  category_id: String
}

// A discourse Category
type Category {
  id: Int
  name: String
  color: String
  text_color: String
  slug: String
  topic_count: Int
  post_count: Int
  position: Int
  description: Int
  read_restricted: Boolean
  can_edit: Boolean
  auto_close_based_on_last_post: Boolean
  cannot_delete_reason: String
  latest_topics(page: Int, numPages: Int): PaginatedTopicList
  new_topics(page: Int, numPages: Int): PaginatedTopicList
}

//A paginated list of discourse topics
type PaginatedTopicList {
  pages: [TopicListPage]
}

//One page of discourse topics
type TopicListPage {
  topics: [Topic]
}

//A paginated list of posts
type PaginatedPostList {
  pages(page: Int, numPages: Int): [PostListPage]
}

//One page of discourse posts
type PostListPage {
  posts: [Post]
}

//Enum of time periods used in Discourse queries
enum TimePeriod {
  ALL
  YEARLY
  QUARTERLY
  MONTHLY
  WEEKLY
  DAILY
}

//Authenticated type for root query
type AuthenticatedQuery {
  allPosts: [Post]
  allTopics: [Topic]
  allCategories: [Category]

  onePost(id: ID): Post
  oneTopic(id: ID): Topic
  oneCategory(id: ID): Category

  latest(page: Int, numPages: Int): PaginatedTopicList
  unread(page: Int, numPages: Int): PaginatedTopicList
  new(page: Int, numPages: Int): PaginatedTopicList
  top(page: Int, numPages: Int, period: TimePeriod): PaginatedTopicList
}

type RootQuery {
  root(token: String): AuthenticatedQuery
}

//Mutation used for logging in to Discourse
type RootMutation {
  login(username: String!, password: String!): String
  createPost(token: String!, topic_id: ID!, category: ID!, raw: String!): Post
}
